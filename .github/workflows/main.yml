name: Run CxOneScanRepo.py (Export Orgs & Repos, Send to IGS)

on:
  workflow_dispatch:

jobs:
  run-CxOneScanRepo:
    runs-on: self-hosted #開 run.cmd

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Verify Python version
        run: python --version

      - name: Install dependencies
        run: |
         python -m pip install --upgrade pip
         pip install requests

      - name: Run CxOneScanRepo.py inside workflow
        shell: python
        env:
          GHTOKEN: ${{ secrets.PERSONAL_TOKEN }}
          CX_REFRESH_TOKEN: ${{ secrets.CX_REFRESH_TOKEN }}
          IGS_API: ${{ secrets.IGS_API }}
        run: |
          # =========================
          # 使用者直接輸入
          # =========================
          DEPARTMENT = "ABC_TS"
          # =========================
          # Category 前綴對照表
          # =========================
          CATEGORY_GROUPS = {
              "API": ["A","B","C","API(abc)", "API(.Net Framework)", "API(Vue)"],
              "Server_Web": ["X", "Y", "Web(Vue)", "ServerClient(.Net Framework)"],
              "APP":["P", "Q", "Client(Vue)", "Client(.Net Framework)","APP"] 
          }
          
          import os, json, requests, subprocess
          API = "https://api.github.com"
          HEADERS = {
              "Authorization": f"Bearer {os.getenv('GHTOKEN')}",
              "Accept": "application/vnd.github+json",
              "X-GitHub-Api-Version": "2022-11-28"
          }
          TOKEN_URL = "https://sng.iam.checkmarx.net/auth/realms/galaxysoftware/protocol/openid-connect/token"
          SCANS_URL = "https://sng.ast.checkmarx.net/api/scans/"
          CLIENT_ID = "ast-app"
          CX_REFRESH_TOKEN = os.getenv("CX_REFRESH_TOKEN")
          IGS_API = os.getenv("IGS_API")
          GHTOKEN = os.getenv("GHTOKEN")
          print("[DEBUG] CX_REFRESH_TOKEN present?", "YES" if CX_REFRESH_TOKEN else "NO")
          print("[DEBUG] CX_REFRESH_TOKEN length:", len(CX_REFRESH_TOKEN) if CX_REFRESH_TOKEN else 0)
  
          # 自動展開成單一對照表，例如 {"A": "API", "B": "API", "Web(Vue)": "WEB", ...}
          CATEGORY_MAP = {
              key: category
              for category, keys in CATEGORY_GROUPS.items()
              for key in keys
          }
          
        
          def detect_project_type(repo_project_type: str) -> str:
          """
          根據 custom property REPO_PROJECT_TYPE 判斷大類 (API/WEB/APP)
          """
          return CATEGORY_MAP.get(repo_project_type, "UNKNOWN")
          # =========================
          # 抓取帳號所屬的所有 org
          # =========================
          def get_user_orgs() -> list:
              """列出目前帳號能存取的所有 org login 名稱"""
              url = f"{API}/user/orgs"
              resp = requests.get(url, headers=HEADERS, timeout=15)
              resp.raise_for_status()
              return [org["login"] for org in resp.json()]
      
      
          # =========================
          # Org / Repo utilities
          # =========================
          def get_org_repos(org: str, per_page=100):
              """抓一個 org 底下所有 repos"""
              url = f"{API}/orgs/{org}/repos"
              repos, page = [], 1
              while True:
                  resp = requests.get(url, headers=HEADERS, params={"per_page": per_page, "page": page})
                  resp.raise_for_status()
                  data = resp.json()
                  if not data:
                      break # 如果 API 回傳空陣列 代表沒資料 結束迴圈
                  for r in data:
                      repos.append({"org": org, "name": r["name"], "https_url": r["clone_url"]})
                  page += 1
              return repos
      
          # =========================
          # GitHub API 取 custom properties (custom properties (裡面加上category))
          # =========================
          def get_repo_properties(owner: str, repo: str) -> dict:
              """
              讀取 repo 的 custom properties，回傳 {property_name: value}
              """
              url = f"{API}/repos/{owner}/{repo}/properties/values"
              resp = requests.get(url, headers=HEADERS, timeout=15)
          
              if resp.status_code == 404:
                  print(f"[WARN] {owner}/{repo} 沒有 custom properties 或無法存取 (404)")
                  return {}
              
              resp.raise_for_status()
              props = {}
              for item in resp.json():
                  props[item["property_name"]] = item["value"]
              return props
      
          # =========================
          # CxOne API 用 Refresh Token 換一組短期的 Access Token
          # =========================
          def get_access_token() -> str:
              payload = {
                  "grant_type": "refresh_token",
                  "client_id": CLIENT_ID,
                  "refresh_token": CX_REFRESH_TOKEN
              }
              resp = requests.post(TOKEN_URL, data=payload, headers={"Accept": "application/json"})
              resp.raise_for_status() # 發生錯誤跳出例外
              return resp.json()["access_token"] # 取出 access_token 給後面使用
          
          # =========================
          # 取得 scanlist
          # =========================
          def get_scans(access_token: str, limit=100, statuses=("Queued", "Running")): # 目前「在排隊中 or 正在掃描」的掃描任務
              """
              從 CxOne API 取得掃描清單，並且自動翻頁。
              - limit: 每頁要取幾筆（API 的 page size，建議 100）
              - statuses: 要過濾的狀態，預設只取 "Queued" 與 "Running"
              """
              headers = {"Authorization": f"Bearer {access_token}", "Accept": "application/json; version=1.0"} # 授權使用者身分
              page = 1
              all_scans = []
              while True:
                  params = {"limit": limit, "sort": "-created_at"} # 用建立時間由新到舊排序
                  resp = requests.get(SCANS_URL, headers=headers, params=params) # 使用 GET 發送請求
                  resp.raise_for_status() # 發生錯誤跳出例外
                  data = resp.json().get("scans", [])
                  if not data: # 這一頁沒東西了
                      break
          
                  all_scans.extend(data)
                  page += 1
                  # 狀態過濾
                  wanted = {s.lower() for s in statuses}
                  filtered = [
                      s for s in all_scans
                      if str(s.get("status", "")).strip().lower() in wanted
                  ]
                  return filtered
          
          
          # =========================
          # IGS API
          # =========================
          def post_to_igs(payload: dict):
                                  # 要求 IGS 回應純文字      告訴 IGS，我送的是 JSON 格式資料
              headers = {"accept": "text/plain", "Content-Type": "application/json"}
              resp = requests.post(IGS_API, headers=headers, json=payload) # 組好的 payload（資料包）用 POST 方法丟到 IGS API
              return resp.status_code, resp.text # 回傳 HTTP 狀態碼 和 回應文字
          
          
          # =========================
          # 主程式
          # =========================
          def main(): 
              all_orgs = get_user_orgs()
              print(f"[INFO] 找到 {len(all_orgs)} 個 org: {all_orgs}")
              token = get_access_token() # 拿 Checkmarx 的 access token
              scans = get_scans(token, limit=100, statuses=("Queued", "Running")) # 抓目前有在掃描的資料
          
              results = []  # 收集結果，最後輸出成 JSON
          
              # 先跑每一個 org
              for org in all_orgs:
                  
                  repos = get_org_repos(org)  # 這裡拿到每個 repo
                  print(f"[INFO] Org {org} 有 {len(repos)} 個 repo")
          
                  for repo in repos:  # repo 會是 {"org": org, "name": "repo_name"}
          
                      github_org = repo["org"]
                      github_repo = repo["name"]
                      # 從 GitHub API 抓取 organization 的 properties
                      props = get_repo_properties(github_org, github_repo)
                      # 從 custom properties 取出 REPO_PROJECT_TYPE
                      repo_project_type = props.get("REPO_PROJECT_TYPE", "UNKNOWN")
                      # 用 custom properties 的值來判斷
                      project_type_for_checkmarx = detect_project_type(repo_project_type)
          
                      if project_type_for_checkmarx == "UNKNOWN":
                          checkmarx_project = DEPARTMENT
                      else:
                          checkmarx_project = f"{DEPARTMENT}_{project_type_for_checkmarx}"
                     
          
                      # 組成 CheckmarxScanList 
                      scan_list = []
                      for scan in scans:
                          scan_list.append({
                              "ProjectId": scan.get("projectName", checkmarx_project), # 專案名稱
                              "Branch": scan.get("branch", "main"), # 分支名稱
                              "Status": scan.get("status", "Unknown") # 狀態：Queued、Running
                          }) 
          
                      # Payload 組裝 (建立要送給 IGS 的資料包)
                      payload = {
                          "GithubOrgId": github_org, # GitHub 組織
                          "GithubRepoId": github_repo, # GitHub 專案名稱
                          "CheckmarxProjectId": checkmarx_project, # Checkmarx 專案 ID
                          "CheckmarxScanList": scan_list, # 掃描清單
                      
                      }
          
                      print("=== Payload ===")
                      print(json.dumps(payload, indent=2, ensure_ascii=False))
          
                      code, text = post_to_igs(payload) # 呼叫 function 送給 IGS 的 API
                      
                      print(f"IGS_API 回應: {code}, {text}")
          
                   
                      # 記錄這次送出的內容與回應
                      results.append({
                          "repo": f"{github_org}/{github_repo}",
                          "payload": payload,
                          "igs_response": text
                      })
          
                   # 寫結果到檔案
              with open("igs_results.json", "w", encoding="utf-8") as f:
                  json.dump(results, f, indent=2, ensure_ascii=False)
          
              print("[INFO] 所有結果已寫入 igs_results.json")
          
          if __name__ == "__main__":
              main()

      # - name: Debug runner user
      #   run: whoami
      # - name: Debug cx.exe
      #   run: dir C:\Tools   
    
